1.希爾伯特第二問題（Hilbert's Second Problem）是德國數學家大衛·希爾伯特於1900年提出的23個未解決問題之一。這個問題涉及到實數的性質，特別是實數的基數（cardinality）和連續性。具體來說，問題聲明如下：
問題： 「我們是否可以找到一個介於有理數和代數數之間的一類數，這種數既不是代數數，也不是超越數（irrational number）？」
換句話說，希爾伯特第二問題探討的是一種介於代數數（algebraic numbers）和超越數之間的新型數。代數數是滿足某個代數方程的數，而超越數則是不滿足任何代數方程的數。
到目前為止，希爾伯特第二問題仍然沒有確定的解答。這個問題提出了一種關於實數集合結構的基本問題，並且它的深刻性和複雜性使得它成為20世紀數學中一個引人注目的難題之一。

2.哥德爾的完備性定理和不完備性定理是20世紀數理邏輯中的兩個重要結果，由奧地利數學家庫爾特·哥德爾（Kurt Gödel）於1930年提出。
哥德爾的完備性定理（Gödel Completeness Theorem）：
哥德爾的完備性定理表明，如果一個公理系統（形式化的數理體系）是一致的並且能證明自己的有界公理，則該系統是完備的。這意味著對於該系統中的每個合法的敘述，要麼它本身是公理，要麼它的否定是可證明的。換句話說，如果某個敘述在這個公理系統中是真的，那麼它在這個系統中是可證明的。
哥德爾的不完備性定理（Gödel Incompleteness Theorems）：
哥德爾的不完備性定理則更為著名，它有兩個主要定理：
第一不完備性定理： 對於任何一個足夠強大的公理系統，其中包括包含基本算術的任何形式化系統，必定存在一個合法的敘述，該系統無法證明其真偽，即該敘述既不可證明，也不可證偽。
第二不完備性定理： 如果一個公理系統是一致的，則它無法在其內部證明其自身的一致性。這就是說，如果你在公理系統中添加了一個陳述「這個公理系統是一致的」，那麼這個新陳述在這個系統內部是無法被證明的。
哥德爾的不完備性定理揭示了數理邏輯的某種固有局限，並表明在某些情況下，無法建立一個既完備又一致的公理系統。這對於對於形式化數學和邏輯的理解產生了深遠的影響。

3.阿隆佐·邱奇（Alonzo Church）和他的 Lambda 演算是計算理論的重要貢獻之一。Lambda 演算是一種形式化的計算模型，由邱奇於1930年代提出，並且被證明是等價於通用的圖靈機，表示兩者有相同的計算能力。以下是一些與 Church 和 Lambda 演算有關的主要概念：
3.1. Lambda 演算（Lambda Calculus）：
Lambda 演算是一種簡單的計算模型，它包含變數、抽象（lambda 抽象）和應用。Lambda 演算中的表達式表示計算過程，並且可以表示任何可計算的函數。一個 Lambda 演算的表達式可以是一個變數、一個抽象（函數的定義），或者一個應用（函數應用到參數上）。
Lambda 演算的語法：
變數：x, y, z, ...
抽象：(λx. M), 其中 λ 是 lambda 符號，x 是變數，M 是函數體。
應用：(M N), 其中 M 和 N 是 Lambda 演算的表達式。
3.2. 邱奇-圖靈標誌數據（Church-Turing Thesis）：
邱奇-圖靈標誌數據聲明了 Lambda 演算和圖靈機（以及其他等效的計算模型）之間的等價性。該標誌數據表明，任何在現實中可計算的過程都可以使用 Lambda 演算或圖靈機進行模擬，而且兩者的計算能力是相同的。

3.3. 邱奇數學（Church's Thesis）：
邱奇數學是一個更具體的理論，它使用 Lambda 演算來表達和分析數學中的可計算函數。邱奇數學是 Lambda 演算的一種應用，並被視為形式化數學的基礎之一。
Lambda 演算和邱奇的工作在計算理論和計算機科學的發展中扮演了關鍵的角色，它們為我們對計算的理解提供了深厚的基礎。

4.艾倫·圖靈（Alan Turing）是20世紀計算理論的關鍵人物之一，他提出了圖靈機的概念，並在其中解決了停止問題。
4.1. 圖靈機（Turing Machine）：
圖靈機是一種理論上的計算模型，由艾倫·圖靈於1936年提出。它包括一個無窮長的帶子，上面分為一系列格子，每個格子上有一個符號。機器的讀寫頭可以在帶子上移動，並讀取或寫入符號。機器還包括一個有限狀態的控制單元，根據當前的符號和狀態，執行某種操作（例如，移動讀寫頭，改變符號，改變狀態）。圖靈機的這種簡單結構使其能夠模擬所有其他形式的計算機。

4.2. 停止問題（Halting Problem）：
停止問題是一個經典的不可解問題，由圖靈於1936年首次提出。該問題聲明：「是否存在一個通用的演算法，能夠確定任意給定的圖靈機和輸入，該圖靈機是否會在有限步驟內停止執行？」換句話說，能否創建一個程序來判斷任何給定程序是否會在執行過程中停止。
圖靈在其論文中使用對角線論證證明了停止問題的不可解性。他的證明方法類似於哥德爾的不完備性定理，即通過建構一個反駁自己的程序，形成了自指的悖論。
停止問題的不可解性表明，我們無法編寫一個通用的程序來判斷任何程序是否會停止。這是計算理論的一個重要結果，顯示了某些問題是不可解的，即使使用最強大的計算模型——圖靈機。

5.喬姆斯基階層（Chomsky Hierarchy）是由語言學家諾姆·喬姆斯基（Noam Chomsky）提出的一個理論框架，用來分類不同類型的語言和文法。這個階層包括四個層次，從最弱到最強分別為：
正規語言（Regular Languages）： 由正規表達式描述，可以用正規運算式、有限狀態機或正規文法來生成。正規語言可以被有限狀態機完全接受。
上下文無關語言（Context-Free Languages）： 由上下文無關文法描述，可以用上下文無關文法來生成。上下文無關語言可以被非確定性下推自動機（NPDA）接受。
上下文有關語言（Context-Sensitive Languages）： 由上下文有關文法描述，可以用上下文有關文法來生成。上下文有關語言可以被線性有界非確定性圖靈機接受。
遞歸可數語言（Recursively Enumerable Languages）： 沒有特定的文法形式，可以被圖靈機接受。這是最強大的類型，包含所有可計算語言。
與機器的關係：
正規語言： 可以使用正規表達式描述，也可以用有限狀態機（有限自動機）接受。正規表達式通常用於字符串匹配，而有限狀態機可以用於實現簡單的模式識別。
上下文無關語言： 可以用上下文無關文法描述，也可以用上下文無關文法生成的上下文無關語言處理器（通常是語法分析器）來接受。上下文無關語言的處理常見於編程語言的語法分析。
上下文有關語言： 用於描述自然語言的文法通常是上下文有關的。然而，由於上下文有關文法的複雜性，實際應用中可能使用其他方法來處理自然語言。
遞歸可數語言： 可以被圖靈機接受，因此涵蓋了所有可計算的語言。遞歸可數語言的理論上包含了計算機科學中所有可解的問題。

6.史蒂芬·庫克（Stephen Cook）是一位加拿大計算機科學家，他在1971年提出了著名的庫克定理，該定理是計算理論中的一個重要成果。此後，他也獲得了圖靈獎等多項獎項，成為理論計算機科學的領域中的重要人物。
库克定理 (Cook's Theorem)：
庫克定理的完整名稱是「庫克-萊文定理」（Cook-Levin Theorem），它於1971年由史蒂芬·庫克提出。這個定理是對非決定性多項式時間（NP）的一種特徵描述。庫克證明了一個問題，稱為布林可滿足性問題（Boolean Satisfiability Problem，簡稱 SAT），是 NP-完全的。
SAT 問題：
SAT 問題是一個布林邏輯問題，問題的目標是判斷一個布林表達式是否有一組變數的賦值使得該表達式為真。具體來說，給定一個包含布林運算符（AND、OR、NOT）的表達式，問題是是否存在一組變數的賦值，使得整個表達式的值為真。SAT 問題的 NP-完全性表明，它是 NP 類別中最難解的問題之一。
NP-Complete：
NP-完全（NP-Complete）是一個重要的計算複雜性類別。一個問題是 NP-完全的，如果它同時滿足以下兩個條件：
這個問題本身是一個 NP 類別的問題。
任何 NP 類別中的問題都可以在多項式時間內歸納為這個問題（即，可以在多項式時間內將 NP 類別的問題歸納為這個問題）。
因此，庫克定理的意義在於它證明了 SAT 問題是 NP-完全的，這樣一來，如果我們能夠在多項式時間內解決 SAT 問題，就可以解決 NP 類別中的所有問題。这也意味着如果找到了一個多項式時間的算法來解決 SAT 問題，則 NP 類別中的所有問題都有多項式時間的解法，並且 P = NP。然而，至今尚未找到這樣的算法。

